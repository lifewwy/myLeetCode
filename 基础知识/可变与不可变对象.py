# Python 3.5.2

# Python中的可变对象和不可变对象
# 什么是可变/不可变对象
# 1、不可变对象，该对象所指向的内存中的值不能被改变。当改变某个变量时候，由于其所指的值不能被改变，
# 相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。
# 2、可变对象，该对象所指向的内存中的值可以被改变。
# 实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是原地改变。
# 3、Python中，数值类型（int和float）、字符串str、元组tuple都是不可变类型。而列表list、字典dict、集合set是可变类型。
# 4、id() 函数用于获取对象的内存地址。

# Python的数据类型分为可变(mutable)与不可变(immutable)。
# 不可变类型包含字符串(str)，整数(int)，元组(tuple)；可变类型包含列表(list)，字典(dict)。
# 是否为可变类型在于内存单元的值是否可以被改变。如果是内存单元的值不可改变的，
# 在对对象本身操作的时候，必须在内存的另外地方再申请一块内存单元（因为老的内存单元不可变），老的内存单元就丢弃了；
# 如果是可变的，对对象操作的时候，不需要再在其他地方申请内存，也就是它的地址会保持不变，但区域可能会变长或者变短。


# 不可变类型
# 不可变类型：变量赋值 a=5 后再赋值 a=8，这里实际是新生成一个 int 值对象 8，再让 a 指向它，而 5 被丢弃，
# 一旦没有变量引用它，它就变成了孤魂野鬼。
# python 是很吝啬的，它绝对不允许在内存中存在孤魂野鬼。
# 凡是这些东西都被看做垃圾，而对垃圾，python 有一个自动的收回机制。
print( '------------ 不可变类型 ----------')
a = 5; print(id(a)) # id() 函数用于获取对象的内存地址。
a = 8; print(id(a)) # id() 函数用于获取对象的内存地址。

print( '------------ 不可变类型 ----------')
x1 = 15; x2 = x1
print( id(x1) )
print( id(x2) )
x2 = 20     # 在不同的内存地址新生成一个 int 值对象 20，再让 x2 指向它
print( id(x1) )
print( id(x2) )



# 可变类型
# 要特别注意 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
print( '------------ 可变类型 ----------')
list1 = [1, 2, 3]
print( 'list1：', list1 )

list2 = list1

list2[0] = 589

print( 'list1 的指向的地址：', id(list1) )
print( 'list2 的指向的地址：', id(list2) )

print( 'list1：', list1 )

# 特别注意，改变 list2 的内容，list1 的内容也相应改变了 ！！！！！！！！！！！

# 可变类型
# 要特别注意 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
print( '------------ 可变类型 ----------')
class testClass(object):                 # 这里有个冒号
    def  __init__(self, name, gender):   # 这里有个冒号
        self.name = name      # 类属性赋值
        self.gender = gender  # 类属性赋值
        print('初始化')

    def abc(self, age):       # 定义类的方法
        # print(self.name)      # 访问类属性
        # print(age)
        self.age = age        # 类属性赋值

tc1 = testClass('Peter','Male')
tc1.abc(50)
print( 'tc1.age：', tc1.age )

tc2 = tc1
tc2.abc(80)

print( 'tc1 的指向的地址：', id(tc1) )
print( 'tc2 的指向的地址：', id(tc2) )
print( 'tc1.age：', tc1.age )

# 特别注意：tc1 指向的对象的内容也相应改变了 ！！！！！！！！！！！





























